"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import environ
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, "docker/.env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-h4ukmjtsu6g4ulu9mlw=(&!&&nhm$m1+l75=j3y_pr9ey#8tkj"

DJANGO_ALLOWED_HOSTS = "localhost 127.0.0.1 [::1] dyugaev.beget.tech"

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "www.localhost",
 
    "90.156.171.134",
    "www.motrum.yuriyzhidkov.ru",
    "motrum.yuriyzhidkov.ru",
    "b24-j6zvwj.bitrix24.ru",
    "pmn.bitrix24.ru",
    "45.153.188.69",
    "test.motrum.ru",
    "www.test.motrum.ru",
    "www.motrum.ru",
    "motrum.ru",
    "192.168.0.104",
    "192.168.0.110",
]
DOMIAN = os.environ.get("DOMIAN")

SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SECURE = True

INTERNAL_IPS = ["127.0.0.1", "localhost"]

IS_TESTING = os.environ.get("IS_TESTING", "False").lower() in ("true", "1", "t")
IS_WEB = os.environ.get("IS_WEB", "False").lower() in ("true", "1", "t")
IS_TEST_SERVER = os.environ.get("IS_TEST_SERVER", "False").lower() in ("true", "1", "t")
IS_PROD = os.environ.get("IS_PROD", "False").lower() in ("true", "1", "t")
DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "t")
# IS_TEHC_WORK= os.environ.get("IS_TEHC_WORK", "False").lower() in ("true", "1", "t")
# IS_TEHC_WORK = True
VERSION = os.environ.get("VERSION")
if DEBUG:
    DEBUG = True
else:
    DEBUG = False


# Application definition

INSTALLED_APPS = [
    "apps.product.apps.ProductConfig",
    "apps.core.apps.CoreConfig",
    "apps.client.apps.ClientConfig",
    "apps.logs.apps.LogsConfig",
    "apps.specification.apps.SpecificationConfig",
    "apps.supplier.apps.SupplierConfig",
    "apps.user.apps.UserConfig",
    "apps.admin_specification.apps.AdminSpecificationConfig",
    "apps.projects_web.apps.ProjectWebConfig",
    "apps.vacancy_web.apps.VacancyWebConfig",
    "apps.notifications.apps.NotificationsConfig",
    "dal",
    "dal_select2",
    "project.apps.WebsiteAdminConfig",
    # "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "debug_toolbar",
    "simple_history",
    "sass_processor",
    "rest_framework",
    "tinymce",
    "drf_spectacular",
    "sorl.thumbnail",
]

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "sass_processor.finders.CssFinder",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "middlewares.middlewares.RequestMiddleware",
    "middlewares.middlewares.WwwRedirectMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"
X_FRAME_OPTIONS = "ALLOW-FROM https://pmn.bitrix24.ru/"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "apps/core/templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": "5432",
        # 'CONN_MAX_AGE': 60,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "ru-RU"
TIME_ZONE = "Europe/Samara"
CELERY_TIMEZONE = "Europe/Samara"

USE_I18N = True
USE_TZ = True

AUTH_USER_MODEL = "user.CustomUser"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
SASS_PROCESSOR_ROOT = STATIC_ROOT

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600
USE_DJANGO_JQUERY = True

SIMPLE_HISTORY_REVERT_DISABLED = True
SIMPLE_HISTORY_ENFORCE_HISTORY_MODEL_PERMISSIONS = True
SIMPLE_HISTORY_HISTORY_CHANGE_REASON_USE_TEXT_FIELD = True

# JQUERY_URL = True
# AUTH_USER_MODEL = "user.CustomAdminUser"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": os.path.join(BASE_DIR, "coolsite_cache"),
    }
    # 'default': {
    #     'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    #     'LOCATION': 'unique-snowflake',
    # },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

if DEBUG:
    import socket  # only if you haven't already imported this

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]

# USE_L10N = True
# DECIMAL_SEPARATOR = '.'
# USE_THOUSAND_SEPARATOR = True
# THOUSAND_SEPARATOR = ' '
# NUMBER_GROUPING = 3

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
# DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
DATA_UPLOAD_MAX_NUMBER_FIELDS = 50000

# CSRF_FAILURE_VIEW = "apps.core.views.csrf_failure"


# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# для гугл
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_PORT = 587
# EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
# EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
# EMAIL_USE_SSL = False
# EMAIL_USE_TLS = True

EMAIL_HOST = "smtp.yandex.ru"
EMAIL_PORT = 465
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER_YANDEX")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD_YANDEX_APP")
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_ADMIN = EMAIL_HOST_USER

# EMAIL_USE_TLS = False
# # EMAIL_USE_SSL = True
# SERVER_EMAIL = EMAIL_HOST_USER
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


SPECTACULAR_SETTINGS = {
    "TITLE": "Doctorsystem API",
    "DESCRIPTION": "",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": "/api/",
    "SERVE_PUBLIC": False,
    # "GET_MOCK_REQUEST": "doctorsystem.apps.core.schema.build_mock_request",
    # drf_spectacular.plumbing.build_mock_request
}
REST_FRAMEWORK = {
    # ВАШИ НАСТРОЙКИ
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # 'DEFAULT_PERMISSION_CLASSES': [
    #         'rest_framework.permissions.IsAuthenticated',
    #     ],
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework.authentication.BasicAuthentication',  # enables simple command line authentication
    # )
}

NDS = 20

if IS_PROD:
    BITRIX_WEBHOOK = os.environ.get("BITRIX_WEBHOOK")
    BASE_MANAGER_FOR_BX = "viktoria.bazarnova@motrum.ru"
else:
    BITRIX_WEBHOOK = os.environ.get("BITRIX_WEBHOOK_TEST_SERVER")
    BASE_MANAGER_FOR_BX = "support@lemurteam.ru"


# BITRIX_WEBHOOK = os.environ.get("BITRIX_WEBHOOK")
# BASE_MANAGER_FOR_BX = "viktoria.bazarnova@motrum.ru"
# BASE_MANAGER_FOR_BX = "steisysi@gmail.com"

DADATA_TOKEN = os.environ.get("DADATA_TOKEN")
DADATA_SECRET = os.environ.get("DADATA_SECRET")
FORM_LEMUR = os.environ.get("FORM_LEMUR")
